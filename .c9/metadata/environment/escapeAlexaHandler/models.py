{"changed":true,"filter":false,"title":"models.py","tooltip":"/escapeAlexaHandler/models.py","value":"class Edge:\n    def __init__(self, name, description, unlocked, destination, validItemsToUnlockSelf):\n        self.name = name\n        self. description = description\n        self.unlocked = unlocked\n        self.destination = destination\n        self.validItemsToUnlockSelf = validItemsToUnlockSelf\n        \n    def isUnlocked(self):\n        return self.unlocked\n\nclass Item: \n    def __init__(self, name, unlocked):\n        self.name = name\n        self.unlocked = unlocked \n        \n    def isUnlocked(self): \n        return self.unlocked\n\nclass Interactable:\n    def __init__(self, name, unlocked, validItemsToUnlockSelf, hiddenItems):\n        self.name = name\n        self.unlocked = unlocked\n        self.validItemsToUnlockSelf = validItemsToUnlockSelf\n        self.hiddenItems = hiddenItems\n        \n    def isUnlocked(self):\n        return self.unlocked\n        \n    def onInteracted(self): \n        if not self.hiddenItems:\n            endText = \"Nothing of note was found inside.\"\n        else:\n            endText = \"Inside you found a \" + \", a \".join(self.hiddenItems[:-2] + [\" and a \".join(self.hiddenItems[-2:])])+ \".\"\n        \n        textToReturn = \"You interacted with \" + self.name + \". \" + endText\n        return {\"text\" : textToReturn, \"itemsToAdd\" : self.hiddenItems}\n        \ndef build_room_description(name, edges, items, interactables):\n    name_sentence = \"You have entered the \" + name + \" . \"\n    edges_sentence = \"\"\n    items_sentence = \"\"\n    interactables_sentence = \"\"\n    if not edges:\n        edges_sentence = \"There are no escapes from this room.\"\n    else:\n        edges_sentence = \"You may attempt to move from this room to the \" + \", the \".join(edges[:-2] + [\" or the \".join(edges[-2:])]) + \". \"\n    \n    available_items = []\n    for item in items:\n        if item.isUnlocked():\n            available_items.append(item)\n            \n    if not available_items:\n        items_sentence = \"There remain no available items in this room that you may add to your inventory. \"\n    else:\n        items_sentence = \"In this room there is a \" + \", a \".join([str(x.name) for x in available_items[:-2]] + [\" or a \".join(str(x.name) for x in available_items[-2:])]) + \" that may be added to your inventory at this time. \"\n    if not interactables:\n        interactables_sentence = \"In terms of interactable objects, there are none.\"\n    else:\n        interactables_sentence = \"In terms of interactable objects, there is a \" + \", a \".join([str(x.name) for x in interactables[:-2]] + [\" and a \".join(str(x.name) for x in interactables[-2:])]) + \".\"\n    \n    return name_sentence + edges_sentence + items_sentence + interactables_sentence\n    \nclass Room:\n    def __init__(self, name, edges, items, interactables, unlocked, validItemsToUnlockSelf):\n        self.name = name\n        self.edges = edges\n        self.items = items\n        self.interactables = interactables\n        self.unlocked = unlocked\n        self.validItemsToUnlockSelf = validItemsToUnlockSelf\n        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)\n        \n    def updateDescription(self):\n        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)\n    \n    def onInteracted(self, interactable):\n        interactedMap = interactable.onInteracted()\n        for item in interactedMap[\"itemsToAdd\"]:\n            for itemInItems in self.items:\n                if itemInItems.name.lower() == item:\n                    itemInItems.unlocked = True\n        \n        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)\n        return interactedMap[\"text\"]","undoManager":{"mark":0,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":85,"column":36},"action":"insert","lines":["class Edge:","    def __init__(self, name, description, unlocked, destination, validItemsToUnlockSelf):","        self.name = name","        self. description = description","        self.unlocked = unlocked","        self.destination = destination","        self.validItemsToUnlockSelf = validItemsToUnlockSelf","        ","    def isUnlocked(self):","        return self.unlocked","","class Item: ","    def __init__(self, name, unlocked):","        self.name = name","        self.unlocked = unlocked ","        ","    def isUnlocked(self): ","        return self.unlocked","","class Interactable:","    def __init__(self, name, unlocked, validItemsToUnlockSelf, hiddenItems):","        self.name = name","        self.unlocked = unlocked","        self.validItemsToUnlockSelf = validItemsToUnlockSelf","        self.hiddenItems = hiddenItems","        ","    def isUnlocked(self):","        return self.unlocked","        ","    def onInteracted(self): ","        if not self.hiddenItems:","            endText = \"Nothing of note was found inside.\"","        else:","            endText = \"Inside you found a \" + \", a \".join(self.hiddenItems[:-2] + [\" and a \".join(self.hiddenItems[-2:])])+ \".\"","        ","        textToReturn = \"You interacted with \" + self.name + \". \" + endText","        return {\"text\" : textToReturn, \"itemsToAdd\" : self.hiddenItems}","","def build_room_description(name, edges, items, interactables):","    name_sentence = \"You have entered the \" + name + \" . \"","    edges_sentence = \"\"","    items_sentence = \"\"","    interactables_sentence = \"\"","    if not edges:","        edges_sentence = \"There are no escapes from this room.\"","    else:","        edges_sentence = \"You may attempt to move from this room to the \" + \", the \".join(edges[:-2] + [\" or the \".join(edges[-2:])]) + \". \"","    ","    available_items = []","    for item in items:","        if item.isUnlocked():","            available_items.append(item)","            ","    if not available_items:","        items_sentence = \"There remain no available items in this room that you may add to your inventory. \"","    else:","        items_sentence = \"In this room there is a \" + \", a \".join([str(x.name) for x in available_items[:-2]] + [\" or a \".join(str(x.name) for x in available_items[-2:])]) + \" that may be added to your inventory at this time. \"","    if not interactables:","        interactables_sentence = \"In terms of interactable objects, there are none.\"","    else:","        interactables_sentence = \"In terms of interactable objects, there is a \" + \", a \".join([str(x.name) for x in interactables[:-2]] + [\" and a \".join(str(x.name) for x in interactables[-2:])]) + \".\"","    ","    return name_sentence + edges_sentence + items_sentence + interactables_sentence","    ","class Room:","    def __init__(self, name, edges, items, interactables, unlocked, validItemsToUnlockSelf):","        self.name = name","        self.edges = edges","        self.items = items","        self.interactables = interactables","        self.unlocked = unlocked","        self.validItemsToUnlockSelf = validItemsToUnlockSelf","        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)","        ","    def updateDescription(self):","        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)","    ","    def onInteracted(self, interactable):","        interactedMap = interactable.onInteracted()","        for item in interactedMap[\"itemsToAdd\"]:","            for itemInItems in self.items:","                if itemInItems.name.lower() == item:","                    itemInItems.unlocked = True","        ","        self.description = build_room_description(self.name, self.edges, self.items, self.interactables)","        return interactedMap[\"text\"]"],"id":1}],[{"start":{"row":38,"column":0},"end":{"row":62,"column":83},"action":"remove","lines":["def build_room_description(name, edges, items, interactables):","    name_sentence = \"You have entered the \" + name + \" . \"","    edges_sentence = \"\"","    items_sentence = \"\"","    interactables_sentence = \"\"","    if not edges:","        edges_sentence = \"There are no escapes from this room.\"","    else:","        edges_sentence = \"You may attempt to move from this room to the \" + \", the \".join(edges[:-2] + [\" or the \".join(edges[-2:])]) + \". \"","    ","    available_items = []","    for item in items:","        if item.isUnlocked():","            available_items.append(item)","            ","    if not available_items:","        items_sentence = \"There remain no available items in this room that you may add to your inventory. \"","    else:","        items_sentence = \"In this room there is a \" + \", a \".join([str(x.name) for x in available_items[:-2]] + [\" or a \".join(str(x.name) for x in available_items[-2:])]) + \" that may be added to your inventory at this time. \"","    if not interactables:","        interactables_sentence = \"In terms of interactable objects, there are none.\"","    else:","        interactables_sentence = \"In terms of interactable objects, there is a \" + \", a \".join([str(x.name) for x in interactables[:-2]] + [\" and a \".join(str(x.name) for x in interactables[-2:])]) + \".\"","    ","    return name_sentence + edges_sentence + items_sentence + interactables_sentence"],"id":2},{"start":{"row":37,"column":0},"end":{"row":38,"column":0},"action":"remove","lines":["",""]},{"start":{"row":36,"column":71},"end":{"row":37,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":36,"column":71},"end":{"row":37,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":37,"column":0},"end":{"row":37,"column":8},"action":"insert","lines":["        "]},{"start":{"row":37,"column":8},"end":{"row":38,"column":0},"action":"insert","lines":["",""]},{"start":{"row":38,"column":0},"end":{"row":38,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":38,"column":4},"end":{"row":38,"column":8},"action":"remove","lines":["    "],"id":4},{"start":{"row":38,"column":0},"end":{"row":38,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":38,"column":0},"end":{"row":62,"column":83},"action":"insert","lines":["def build_room_description(name, edges, items, interactables):","    name_sentence = \"You have entered the \" + name + \" . \"","    edges_sentence = \"\"","    items_sentence = \"\"","    interactables_sentence = \"\"","    if not edges:","        edges_sentence = \"There are no escapes from this room.\"","    else:","        edges_sentence = \"You may attempt to move from this room to the \" + \", the \".join(edges[:-2] + [\" or the \".join(edges[-2:])]) + \". \"","    ","    available_items = []","    for item in items:","        if item.isUnlocked():","            available_items.append(item)","            ","    if not available_items:","        items_sentence = \"There remain no available items in this room that you may add to your inventory. \"","    else:","        items_sentence = \"In this room there is a \" + \", a \".join([str(x.name) for x in available_items[:-2]] + [\" or a \".join(str(x.name) for x in available_items[-2:])]) + \" that may be added to your inventory at this time. \"","    if not interactables:","        interactables_sentence = \"In terms of interactable objects, there are none.\"","    else:","        interactables_sentence = \"In terms of interactable objects, there is a \" + \", a \".join([str(x.name) for x in interactables[:-2]] + [\" and a \".join(str(x.name) for x in interactables[-2:])]) + \".\"","    ","    return name_sentence + edges_sentence + items_sentence + interactables_sentence"],"id":5}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":62,"column":83},"end":{"row":62,"column":83},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1543873593251}